{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before you turn this problem in, make sure everything runs as expected. First, **restart the kernel** (in the menubar, select Kernel$\\rightarrow$Restart) and then **run all cells** (in the menubar, select Cell$\\rightarrow$Run All).\n",
    "\n",
    "Make sure you fill in any place that says `YOUR CODE HERE` or \"YOUR ANSWER HERE\", as well as your name and collaborators below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "NAME = \"Leander van Rooij, u846850\"\n",
    "COLLABORATORS = \"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Fill in the cell above to provide us with your name and student number, like\n",
    "\n",
    "NAME = \"Adam Smith, #student number#\"\n",
    "\n",
    "where you replace \"#student number#\" with your ... (very good!)\n",
    "\n",
    "and if you are doing this with someone else (not more than one other person):\n",
    "\n",
    "COLLABORATORS = \"Karl Marx, #student number#\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 3\n",
    "\n",
    "This is the assignment for week 3. This was actually an exam in a previous year. We give the points to give you an idea of how such an exam works. However, we grade assignments only as pass or fail."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bargaining model\n",
    "\n",
    "In a previous class we considered a two period bargaining model. Then we extended this to a three period model.\n",
    "\n",
    "In this assignment we are going to extend the model to $n$ periods, where $n$ is a variable.\n",
    "\n",
    "\n",
    "# Import libraries\n",
    "\n",
    "First, we need to import some libraries:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1)** [0.5 point] Use `np.arrange` to create a list of offers between 0.0 and 10.0 (including 10.0) with step 0.1:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "d307dbf321ecc17e8f36bf84250487f7",
     "grade": false,
     "grade_id": "cell-9de67a6b55a0507a",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "min_offer = 0.0\n",
    "max_offer = 10.0\n",
    "step = 0.1\n",
    "offers = np.arange(min_offer,max_offer+0.1,step)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2)** [0.5 point] Introduce the functions `accept_offer` and `make_offer` as in the previous class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "eed57be9b8022e54e2b188c5ecd28d32",
     "grade": false,
     "grade_id": "cell-559c0b6b9ac1df79",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def accept_offer(offer,your_outside_option):\n",
    "    accept = (offer >= your_outside_option)\n",
    "    return accept\n",
    "\n",
    "def make_offer(your_outside_option,other_outside_option):\n",
    "    profits = [(max_offer-offer)*accept_offer(offer,other_outside_option) for offer in offers]\n",
    "    max_profit = max(profits)\n",
    "    max_index = profits.index(max_profit)\n",
    "    if max_profit >= your_outside_option:\n",
    "        your_offer = offers[max_index]\n",
    "        your_profit = max_offer-offers[max_index]\n",
    "        other_profit = offers[max_index]\n",
    "    else:\n",
    "        your_offer = -1 # no offer is made\n",
    "        your_profit = your_outside_option\n",
    "        other_profit = other_outside_option\n",
    "    return your_offer, your_profit, other_profit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3)** [0.5 point] Initialize a dictionary `offer` as in the assignment of week 5:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "a395e8a21829eb0985e126bb00b64021",
     "grade": false,
     "grade_id": "cell-dfb4c40f2bdc4717",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "offer = {}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**4)** [0.5 point] Complete the following function such that it returns the payoffs to players 1 and 2 for a game of length $n$ periods when the discount factor is given by $\\delta$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "49b19c028353b54d4af2c45eb93abfdd",
     "grade": false,
     "grade_id": "cell-e53660a4ea45ceb0",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def outcome(n,delta):\n",
    "    offer[n+1]=[0,0,0]\n",
    "    for i in range(n):\n",
    "        offer[n-i]= make_offer(delta*offer[n-i+1][2],delta*offer[n-i+1][1])\n",
    "    return offer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**5)** [0.5 point] Check the outcomes for the case where $n=1, 2$ and $n=3$ (these are outcomes that you have seen before)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "db3596355191628ff30630ea1e39ae9e",
     "grade": false,
     "grade_id": "cell-61e5b201c87f79db",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1: (0.0, 10.0, 0.0), 2: [0, 0, 0]}\n",
      "{1: (9.0, 1.0, 9.0), 2: (0.0, 10.0, 0.0), 3: [0, 0, 0]}\n",
      "{1: (0.90000000000000002, 9.0999999999999996, 0.90000000000000002), 2: (9.0, 1.0, 9.0), 3: (0.0, 10.0, 0.0), 4: [0, 0, 0]}\n"
     ]
    }
   ],
   "source": [
    "delta = 0.9\n",
    "print(outcome(1,0.9))\n",
    "print(outcome(2,0.9))\n",
    "print(outcome(3,0.9))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**6)** [1 point] Plot for the case with $\\delta =0.9$, the payoff for player 1 of a game that lasts for 1 round, a game that lasts for 2 rounds, up till a game that lasts 30 rounds. On the horizontal axis, we have the length of the game; on the vertical axis the payoff to player 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "0b3da29b42397e0a2662e462d55a2aba",
     "grade": false,
     "grade_id": "cell-fcf90dee233cef99",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fb6b8ebc828>]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEKCAYAAAD9xUlFAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzsvXd8XHeV9/850yXNaNSL5SJ3x7FTHDud9BACIYTQQtsA\nWQI8LBuyLLvwwMKyy2+fZSmBLQ+LSQhlA6Ek9IeQEJJQ7BQ7thM7tlxly5LVy4xG0+f7++Pe72g0\nmnLLV7LKeb9e87Km6My1rnTPnPY5JIQAwzAMwwCA42wfAMMwDDN3YKfAMAzDZGGnwDAMw2Rhp8Aw\nDMNkYafAMAzDZGGnwDAMw2SZMadARN8ion4i2p/zWB0RPUFER/R/a2fq/RmGYRjzzGSk8G0Ar8l7\n7BMAnhRCrAXwpH6fYRiGmSPQTA6vEVE7gF8JITbp9zsAXCOEOENErQCeFkKsn7EDYBiGYUzhmuX3\naxZCnAEA3TE0FXshEd0N4G4AqKqqumjDhg1ljR8fiAAAVjVWKTlYhmGY+czu3bsHhRCNZr5ntp2C\nYYQQ2wFsB4CtW7eKXbt2lf2e9337BfSHY/jVR14104fHMAwz5yGik2a/Z7a7j/r0tBH0f/tVGg/4\nXBiPpVSaZBiGWVTMtlP4BYA79a/vBPBzlcb9XhfC7BQYhmEsM5MtqT8AsBPAeiI6TUR3AfhXADcS\n0REAN+r3lRHwuRGOs1NgGIaxyozVFIQQby/y1PUz9Z4BnwuJVAbxVBpel3Om3oZhGGbBsqAmmgM+\nzcdxColhGMYaC9IpcLGZYRjGGgvKKfi9bgAcKTAMw1hlQTmFbPoonjzLR8IwDDM/WVBOwe/lmgLD\nMIwdFpRTqPZx+ohhGMYOC8opTBaaOX3EMAxjhQXlFPzcksowDGOLBeUU3E4HfG4HxnmqmWEYxhIL\nyikAWltqiCMFhmEYSyw4p1DtcyHMNQWGYRhLLDinEPC5OH3EMAxjkQXnFPw+ls9mGIaxyoJzCgGv\nW7n20b6uUdzz8B6kMzO3z5phGGYusOCcgn8GagrPHB7Az/f2YGg8rtQuwzDMXGPBOYXADKSPQlHN\nyYxGuYDNMMzCZgE6BTfGEylkFKZ6QnrkMTrBToFhmIXNwnMKXheEACIJddFCKKrZGp1IKLPJMAwz\nF1l4TkHqHylsS81GCpw+YhhmgbPgnMJM6B+N6c5gjNNHDMMscBacUwhk5bPVXcAnIwVOHzEMs7BZ\ngE5BfaQwWVPgSIFhmIXNwnMKirevZTIiG3VwTYFhmIXOwnMKevpIVaF5PJGC7G7lmgLDMAudBecU\nJgvNai7goZzogGsKDMMsdBacU6jyOOEgdekjWU+ocDu5psAwzIJnwTkFIoLfq07qQnYeLa+r5PQR\nwzALngXnFACtrqAuUtAcwbK6SoTjKSTTGSV2GYZh5iIL1Cm4MB5X86leDq4tr6sEMLXGwDAMs9BY\nkE5BbfpIs7OiXnMK3JbKMMxCZkE6BZXy2TIyWFpbAUD9ANvTHf2IJdNKbTIMw1hlgToFt7I5hVAs\niYDXhboqDwBgTGFbatfwBN7z4Av45b4eZTYZhmHssCCdgsrta2PRJKor3Kip1JyCykihP6xtcusL\nxZTZZBiGscOCdApq00cpBHwu1FRok9IqncJIRIs6Bsd5KI5hmLnBwnQKXhfiqQwSKfvto6FYEsEK\nN6qlU1BYaB6ekE6Bdz8zDDM3OCtOgYjuJaIDRLSfiH5ARD6V9lXKZ4f09JHTQaj2uTCmcPvaZKTA\nToFhmLnBrDsFImoD8NcAtgohNgFwArhD5Xv4veq2r4VjKVTrTqam0jNDkQKnjxiGmRucrfSRC0AF\nEbkAVAJQ2n6jcqeCVmjW7NVUupXWFIZ1ZzDEkQLDMHOEWXcKQohuAF8CcArAGQBjQojH819HRHcT\n0S4i2jUwMGDqPSbTR/acQiqdwXg8haBeTwhWuJVGCiN6pDAykWT5DIZh5gRnI31UC+ANAFYCWAKg\niojelf86IcR2IcRWIcTWxsZGU+8RUCSfLdNPuekjlTWF4Uii4NcMwzBni7ORProBwAkhxIAQIgng\nUQCXq3wDVekjKZstO49qlEcKSXhd2ingYjPDMHOBs+EUTgG4lIgqiYgAXA/goMo3UFVolmJ41b7J\nmsJYNImMXMVmk6HxONY2+wFwsZlhmLnB2agpPAfgJwBeBPCyfgzbVb6HqpZUuUuhOqemIISaAnYy\nnUEolsK6pgAALjYzDDM3cJ2NNxVCfBbAZ2fKvsflgNflQNhmpCDF8GShOSt1EU0gWOm2ZVt2Ma3J\nRgpqncLxgXF43U601VQotcswzMJmQU40A2qkLvIjBZVSF7LzaFltJbwuh/L00T0P78Vnf35AqU2G\nYRY+ZyVSmA1UbF/LFppzagqAGqkL2W1UX+VBg9+rPFI4PTLBba4Mw5hmwToFv9eFcZs1hbFoEg4C\nqjx5TkFBW6p0CrVVHjT4PUojhXgqjZGJJBTVwxmGWURw+qgEoVgSAZ8bDgcBAIIVcqfCDEQKYXWR\nwoBuayyaxERCjVoswzCLgwXtFOy2pIaiyWyRGZgsOCupKehOoaZScwpDEXVOoT/HwfSO8a4GhmGM\ns2Cdgt+roKYQS2V1jwCtq6nK41TiFIYnEgh4XfC4HKj3ezA0nlA2/9AfYqfAMIw1FqxTCPhc2e4h\nq4xFk1mJC4mmlGo//z8SSaBWX/HZ4PcilRFK0lIA0B+edARn2CkwDGOCBe0UxuMpCGH903eogFMI\nVrgxpiBSGIoksnufGwJe/TE1KaT+UBx6GQS9vOqTYRgTLGinIAQQSaQt25Bb13KpqVSjfzQykeMU\n9H8Hwmo6kPrDMTT4vaitdOPMWFSJTcmh3hC+9rsjtpwtwzBzlwXsFLSL+biNukIoOrWmAMidCirS\nR0nUVk6NFFTNKvSH42iu9qElWKG8pvDI7tO473eHle6VYBhm7rBgnYIUxbOqf5RIZRBNpgukjzzK\nWlLrqjTbDX49faTIKfSF4mgKeNEa9CmvKfSMavZODU8otcswzNxgwToFKZ8dshgp5EtcSKRSqp30\nSTSRRjSZzhaaa/Qd0KoG2AbCMTRVe9ES9CmPFE6PaukodgoMszBZsBPN0ilYnVWQYnjT0kcVbiTT\nAhOJNKq81n58cjdzve4UHA5CXZVHSfoomc5gKJJAY8AHt4MwFEkglkzD53batg0APbpT6Bphp8Aw\nC5EFHCnYk8+WEUahQjNgT/9IDq7JmgIAXf/IfqQwOB6HEECzHikAU+cW7BBLprPT0l0cKTDMgmQB\nOwU9UrCaPsou2JleUwDs6R9JiQvZfQRA1z+yf/GWDqAp4ENrUJPNVtWBlJuK4vQRwyxMFqxTmCw0\nq68pALA1qyBls2ur8iMFBU4hLJ3CZKSgalahW08dNQW87BQYZoGyYJ1ClccFIuvpo7EikYKK9NHQ\n+NSaAqBFCkMK0kdymrkpJ32kqgOpe0RzCpeuqkfPaAwpluZmmAXHgnUKDgfB73FZ3r4mdylMqylk\n00f2IgUHTXU49X4vosk0IjZF/PpCcRBpkYff60LA61LWgdQ9GgURcPHKOqQzQmm769B4HFd/8Sm8\nfHpMmU2GYcyzYJ0CYE8+OxRLwu0k+NxTf0STkYK9mkJtpScryQ1MzirYTSENhGOor/LA7dSOuyXo\nU1ZT6B6NoingxarGKgBq6wovd4/h5NAE/nxsUJlNhmHMY8kpENHLqg9kJgj43LYKzdU+N4hoyuM+\ntxNel8N2TSG3ngAA9X7tvt0OpP5QHI0BX/Z+S9CHXkXdRz2jUbTVVGB5XSUAtR1IJwYjAICj/ePK\nbDIMY56ijfZEdHuxpwC0zMzhqMXvcyEct15TyC8ySzSpC3s1hbrKqU6hUVGkoElceLP3W4M+HO4b\nsGVT0j0axea2IFqDFXA5SGmk0MlOgWHmBKWmr34I4CEAhUZ3fQUem3MEfK5s+6dZQrFUdjdzPjUV\n9uSzRyYSWNXgn/LYpNSFvUihLxTDOa2B7P2WYAX6w3Ek05lsSskKmYzAmdEYXrOpBU4Hoa22QqlT\nOK47hWP94xBCTIvQGIaZHUo5hZcAfEkIsT//CSK6YeYOSR1+rwunhqxduEIlIoWgzUhhOJLERSum\nRgpyZsFOpJDOCAyOx9GUkz5qDfoghLaic0lNhWXbg+NxJNIZtOk2ltdVomtEnQLricEIHASE46ms\noB/DMLNPqY+OHwUQKvLcG2fgWJQT8LltaR8VTR9VuC2L4gkhdNnsqbY9LgeCFW5bTmEoEkdGaO2o\nElVtqXJGQTqFZXWVymoK8VQa3aNRXLSiFoD6FNLukyM4PsBpKYYxQlGnIIT4I4BuIrq3wHO7ZvSo\nFFHtc2HcYk0hFE1Nm1GQ2KkphGIppDNiisSFxO6sQu40s6RVDrCpcgq1ulOorcRwJGF5DiSXU0MT\nEAK4cWMzAPVO4a++/yL++VevKLXJMAuVkklmIUQawNtn6ViU4/e6EEtmkDQ5ZCWE0NNHRWoKNlZy\nyhqH7DbKpd7vxYCNSCF3cE3SWq1G6kIOri3JSR8BQNew/RSS7Dy6eGU9Aj6XUqcwEkngzFgML3eP\n8WIghjGAkcrjn4noP4noVUS0Rd5m/MgUIPWPzM4qxFMZJNKZaYNrkmCFG7FkBrGk+a1uwwXE8CSN\nNqUuJiOFSadQXeFChdtpO1LoGY0i4HNlo6esU1CgliqdwsqGKqxp8it1Cod6wwC0Vt8+Ra25DLOQ\nMaL9fIH+7z/lPCYAXKf+cNTiz9m+Vlc1/SJcjGJieJKs/lE0aVqSeqSAGJ7EdvpI1z1qzHEKRKQt\n27Gpf9StzyhIltVpX6uoK3QORVBf5UGwwo01jX481aGmhRYAOnony2L7u8eyNRYVZDICqYyAx7Wg\nZ0CZRUbZ32YhxLUFbnPeIQC5i3bM5b2LieFJ7EhdyF0KhSKFer8XY9EkEilrmkJ9oRhqK93wuqY6\nKhXLdrpHY1OcQrDCjYDPpaQt9fhABCsbtCnpNU1+DI7HbQ0H5tLRF0bAp+lgvdytVkLjgT+dwFX/\n9hRrQDELirJOgYiaiegBIvqNfn8jEd0184dmn4DX2qKdSTG8YjUFXerCgnx2IdlsSXZWIWItzdEf\nntqOKlHiFEYmprS0EpHWlqooUmjPcQoAcHQgbNsuABw8E8a5S6qxutGPAz1qncIzhwfQG4plU1QM\nsxAwEvd+G8BvASzR7x+G1q4655lctGPOKUgxvKJzChXWlVJHIgl4XQ5UeqannRr04rPVFFJ/OD6l\nyCxpDfrQF4ohnbFWaA3HkgjFUtnOI8my2krbkUIknkJfKD4lUgDUdCBlMgKH+8LY0FKNzW1BpZFC\nJiOw7/QoAOCFzmFldhnmbGPEKTQIIX4EIAMAQogUAPMV1rPAZKHZWvqoWKHZzk6F4UgCdVWeghO7\n9XqkYLUDaSAUKxIpVCCVERiyaLdnVIsy8offltdrA2wZi84G0KIEAFmnsLS2Eh6XQ4lTOD0SxUQi\njQ0tAWxqC6IvFM92aNnl+GAk+2FjV+eIEpsMMxcw4hQiRFQPXe6CiC4FMC/0jf0W9zSXLzTrNQUL\nbakjE4mC9QQgR/8obP7incmI4pFCtb0Btu5RLRpoy3MKy+oqkUhlbLXR5nYeAYDTQVjVUKXEKRzU\ni8zrWwLYtKQaAHCgu9g8pjn2dmlRwsbWauw6Oay03XUsmsRHfrBHmbotw5jBiFP4GIBfAFhNRH8G\n8F0AH5nRo1KE1ZZUOQUdKFJTqPI44XKQtUKzHikUoiGgp48s6DWNTCSQyogp7agSu1PN3XqksHRa\n+ki7byeFdGJAcwrt9VXZx9Y0+XFUwQRyR28YRMC65gDObQsCUFds3ts1Ar/XhbdtW4a+UBynFUp+\nPHmwD7/c14Of7ulWZpNhjGKk+2g3gKsBXA7gAwDOFUK8ZOdNiaiGiH5CRIeI6CARXWbHXjG8Lic8\nTodppzAWTcLrchRtNyUibarZQk1hODJdNltS6dFmCqxECpNrOKenjyanmq1duLpHonA7KRvJSOSs\nglV9KQA4MRRBa9CHipway5omP06PRC3NgeTS0RvG8rpKVHld8HtdWNVQhf2KnMK+rjGctzSIi1fW\nAVBbV9h5bAgA8LTC1lyGMYqR7qNdAO4G0COE2C+EUNEr+DUAjwkhNgA4H8BBBTYLoi3aMVlTKCGG\nJwlWuC3XFOpLzEw0BDyWBtj69DmE5gLpo7oqDzxOh+VZhZ7RKFqDFVOWAgGa5AWRvQG2E4ORKVEC\noDkFIYBjNqOFg70hrG+eVIzd1BZU4hRiyTQOngnhgmU1WNccQMDnwq6TauoKQgjs0J3C7pMjptup\nGcYuRtJHdwBoA/ACET1MRDeRDV1jIqoGcBWABwBACJEQQoxatVcOK9vXQrFk0SKzxIrURTKdQSiW\nKlpTALS2VCvpo1KRAhHZakvtHo1iSc10u16XEy3VPlvpo87BCFY2TncKgL0OpFgyjc7BCDa0Vmcf\n29RWjZ6xmOWCu+RAzxhSGYHzl9XA6SBctKIWuxRFCl3DUXSPRvH685cgnRH48xG1m+j2do1mdawY\nphBG0kdHhRCfArAOwPcBfAvAKSL6HBHVWXjPVQAGADxIRHuI6H4iqsp/ERHdTUS7iGjXwID1MNrv\nc1koNBffpSCpqTAviidfn6+Qmkt9lRcDFtJH8nsKFZoBuZbTeqTQVlNZ8Dk7aqmjEwmMTCSxMi9S\nWNlQBQdpuxWscrR/HBkBbGiZGikAwP4ee8XmPae0zzAXLqsBAGxdUYvDfeOW5lby2XlccwIfvnY1\nAj6X0hRSLJnGu+5/Dp94xFb2l1ngGJrPJ6LzAHwZwBcBPALgzdBktX9v4T1dALYA+LoQ4kIAEQCf\nyH+REGK7EGKrEGJrY2OjhbfRCHjdptNHpbauSazsVBiR08wl0keNAY+llZz9oRgCPlfROkhLtbVI\nIZnOoC8UQ1uBSAHQ6gpWI4X8ziOJ1+XE8rpKW8Xmg2cmO48k5y7RnYLNFNK+02NYEvShSe/q2tqu\nfTbarSCFtOPYEBoDXqxvDuBVaxvwzOEBZZ1Nfz46iPF4Cn8+Omh7mJFZuBipKewGcB+AFwCcJ4T4\nayHEc0KILwM4buE9TwM4LYR4Tr//E2hOYkbwW0wfFWtHldRUeEzvVJBDaaV0mBr8XgxH4qZ7//tC\npRfTtAZ96A3FTF9gesdiyAhMG1yTLKutRF8obqkoLJ1Ce8O0QNG2MF5Hbxhel2NKvSJY4caK+krb\nTmFv1wguWF6TvX/+0hq4nWS7riDrCZevrgcR4Zp1TUonph/b3wuf24GMAH6+lzubmMIYiRTeIoS4\nXgjxfSHElLyGEKLYHueiCCF6AXQR0Xr9oesBzJjYvaWaQtRITcGN8XjKlCy3jBRKOYX6Kg8yYvK1\nRukPxwq2o0pagj4kUhmMmIxuZP652Na25fXa41ZaMjv1bWuyiymXNU0BnBiMWNYV6ugLY11zAM68\n4vimJUHstyF3MTQeR9dwFOcvnXQKFR4nNrUFbdcVjg2MYyAcx2Wr6gEAV6/XImQVKaRUOoMnDvbh\n5k2t2LK8Bo+8eFrpbIUQwtYQIzN3MFJTOE5EryOivyOiz8ibzff9CICHiOglaCqs/2LTXlGqfebS\nR0IIbT9zkV0KklylVKNkdY9KFZr1C7vZFJKme1TcKbRmZxXMXbzlHoX8wTXJ5F4F8ymk44OR7ARz\nPmua/EimheXU1MEz4SmpI8mmtiC6hqOW8/9yaO2CZTVTHt+6ohb7To8hnrLeRitbUS9f3QAAaK72\n4ZzWajzd0W/ZpuS5E8MYnUjipnNbcPuWpTjcN44DNmsrudz3xGFc++Wnbf3/mbmBkfTRfwN4G7QL\nOQF4C4AVdt5UCLFXrxecJ4S4TQgxYzoBfq9WaDb6qWgikUY6I8qmj7L6RyY+eUvZ7Joy3UcATHXI\nCCHK7jVuCWoXdbO55J4ykcIyG3sVOoci0+oJEjsdSEPjcQyOx6cUmSWb2vTJZosXxH1do3A6CJuX\nBqc8vrW9DolUxlZqasexIbTVVGRlyQHgmvWN2H1yxPaGO5k6unpdI245rxUep0PZcFwknsKDOzpx\ncmgCP32R01LzHSPpo8uFEH8BYEQI8TkAl0HrRJoXBHwuZIR2sTdCViHVQEuq9nrjnziHIgkEvK6S\n+vtSFM+MdISU2240FCmYcwrdo1E0+D1FC9iNfi98bofpATYhBE4MFHcKq/U21SMWnEKHnoPf0FI9\n7blNS+xNNu/pGsW65gAqPVMjya36fukXLOogZTICO48P4TK9niC5Zl0jUhmBPx+13pqayQj89kAv\nrlnXhAqPEzWVHly3oQk/39utRPb70T3dCMdSaAx48Y0/HLcsvFiIYwPjuGP7ThzpYyXa2cKIU5D5\nhgkiWgIgCaB15g5JLWb1j7K7FMoWmi1EChMJ1BVYw5mLjBTMpI+yMwolIoUGvxdOB5mOFPKX6+RD\nRJbUUgfCcUQS6aJOIeBzo6XaZ6kt9aDuFAqlj2qrPGirqbD0iT6TEdjXNTotdQRoYoarGqss1xUO\n9YYxOpHE5avrpzy+ZUUtAl57ral7ukbRH47jNZtaso/dvqUNg+MJ/NHmHIQQAt/Z0YnNbUF89vUb\ncWIwgscP9NqymcuXftuBZ48P4x9/eYDXqc4SRpzCr4ioBlo76osAOgH8YCYPSiWT8tnGLt5SNttI\noRkw5xSGI8XF8CTVPjdcDjKVPiq0hjMfp4PQHPBaihSKpY4ky+s0tVQzFGtHzcWqBlJHbwj1VZ6i\nkdNmi5PNJ4YiCMVSuGBZsODzW1fUYvfJEUsF1x3HtIvzZXlOwe104Mq1DXi6w3pr6m8P9MLtJFy7\noSn72DXrm1Bb6cYjL562ZFPy56NDONo/jvdc3o6bN7Wivb4SX3/mmJIL+P7uMfxmfy/WNfvx56ND\nePKg/dqKRAiBrzzegacU1GsWGkYKzf8shBgVQjwCrZawQQjxDzN/aGqY3L5mMFLIpo/KDa9JpVST\nkUKZtaAOB6Heb07qYlLiovSqyZagD70h4xdvIYQ+uFbaKcgBNjMXAqNO4Vj/uOkLTEdvGBtap0cJ\nks1Lg+gcmjAtIbEvW2SuLfj81vY6jEwkcXzQvCPbeWwIKxuq0Bqc/rO+Zn0jekMxdFhIoQgh8Nj+\nXlyxpmHKBx2Py4Fbz1+Cx1/psyWl8e0dnaiv8uCW81vhdBDuvmo1Xjo9li2a2+G+Jw6j2ufCw3df\nhtWNVfj//t9By1sJ83n0xW78+++P4sMPvYjjCsQXFxJFnQIR3Z5/A/A6ANfrX88LstvXDDqFsTKy\n2Vm7+orHMRNdLCORZNlIAdClLqykj0pECgDQGqwwFSkMRxKIJTNlI4VldZUYj6dMtbueGIrA43SU\ntL26yY9IIm3qmNMZgcN941jfPL2eIDnXooz23q5RVHmc2SJ4PtvapTieubpCKp3BcyeGp0UJkqvX\naZ/wraSQDp4J49TwBF5zbsu0527fshSJVAa/efmMabuAJoT45KE+vOOS5dkVsLdvaUOD34uvP3PM\nkk3JnlMjePJQPz5w9WrUVXnw6Vu01NR3d3basgsAg+Nx/POvX8HmtiA8Lgc+8oM9SrumXj49hp/t\n6Vae7hqOJHD/H4/bbjooR6lI4fUlbrfM6FEpxOz2tXL7mSUOByFYYU4pdSgSR32ZmgKg5afNRAr9\n4RiqPE5UeUtHN1L/yOgvq1yuU2xwTWKlLfXEQATL6yunzRHksqbRfAfSqeEJRJPpgp1HEil3YXY9\n596uUZy3tKboMbfXV6K+ymNaMXV/Twjj8dS0eoKkJejDhpaApdbUxw70wkHADRubpz133tIgVjVW\n4RGLHUPfe7YTTiK885LJZkSf24m7rlyJPx4ZtNWJ9ZUnDqOuyoP3XN4OALh2fROuXteIrz15JNva\nbZV/+uUrmIin8ZW3no8vvvl8HOgJ4V9/c8iWTcmRvjDecf+z+OgP9+JLj3cocwwD4Tju2L4Tn//1\nQbz7gedND86aoahTEEK8t8TtfTN2RIqZLDSbqymU0z4CzOkfRRNpxJIZg5GCOakLbblO6dQRoHUg\nTSTShlNpxZbr5CNbKM0Um0u1o0qstKV26It1SqWPGvxetAZ9pjqQpDLq+QWKzBIiwtb2WtNyF7Ke\ncOmqwk4B0GoAuzrNt6Y+tv8MtrXXZRsY8o/3TVuW4vkTw6bnTCYSKfzwhS68ZlNLdl+H5J2XLkfA\n68J/W4wWnj8xjD8eGcQHr1415YPOp193DiYSadz3xGFLdgHg94f68It9PfjwtWuwtjmAGzc24z2X\nt+PBP3fid6/0WbYLaBHIe7/9ArwuJ267YAn+66lj+D+/OWTbMfSFYrhj+050DUdxz/VrcaBnDO+6\n/zklWluFMDKnUE9E/05ELxLRbiL6mr6JbV5gdtFOKJbUlug4y9fgg5Uew5HCcHaauXQEAmhtnoPj\nccO/TP2h0tPMkpbsXgVj6ZjTZQbXJMtq9b0KBi8smYxA59BEWafQ4PcgWOE2VWw+pC/WWdtU3CkA\nWrRgxim8ciaEZFoU7DzKZVt7HU4OTaDfhEz5zmNDWN8cKHjhllyzXramGs/VHxsYx+G+8SldR/nc\ndmEbAJieWfjpnm6EYqnsJ/lcqn1uvOPS5fh/L5/BSX3dqlGEEPjy4x1oDHjx7kun2l7bHMC7LlmO\nh547mW07NsN4PIVP/XQ/1jX78aFrVmcf/+RrN+DcJdX4+E/2Wd52F0um8f7v7sLgeBz337kVX3nr\nBfiLy1Zg+x+O43O/fMWyY+gZjeJt39iJ3rEYvvO+i3Hvjeuw/d1b0dEXxtu/+Zxtxd9CGOk+ehia\nqumboAnhDQD4ofIjmSH8HvOF5nKpI0lNhdtwTUEOrhmJFOr9HsRTGcNttGYiBcD4VHPPaAwVbme2\n06oYVV4XGvwew582e8aiSKQyZZ0CEZnWQDp0Joz2+qopS3sKsWlJECcGI4Z/xnulMury0k5BiuMZ\n1UFKpDJ4obN4PUFykd6a+sxh4ymk3+qtoTcVqCdI2moqcNmqejxqQvZCtqFuaqvGRSsKF93vumIl\nXA4Htv+ZcKtlAAAgAElEQVTBnDzajmNDeO7EMD58zeqC5/CjN6yD3+vC539t/kL7xccOoTcUw7++\n6bwps0JelxP/8fYLEU9lcM/De03PWWQyAh/78T7sOTWK+956AS5YVgOHg/C5W8/FX165Et/e0YlP\n/Wy/6a60ruEJvG37TgyNJ/Dduy7JLnS6dkMT7v+LrTg+MI63f/NZZXvHJUacQqvegXRCv30ewPQE\n5RzF4SBtqtlEoblckVliZvua3JFQrvsIMDerIIRAf6i0xIXE7FRz9+iEvkin/PqMpbWVhqeas0J4\n9aWdAqDVFczMKnT0hUvWEySbl1ZDCOAVg5PNe7tG0Rr0le3wOndJNXxuB3YZLDbv7RpFLJkpWk+Q\nuJ0OXLHGXGvqb/f34vylwbKNArdvaUPn0ARePGVsrcnOY0M43DeOOy9rL/q70VTtw5suasOPd582\nfNESQuBLj3dgSdCHt1+yvOBraqs8+OgN6/DHI4Om2kl3nxzGd589iTsva8eW5dMd2apGP/75DZvw\n/Ilh/Mfvjxi2CwBffqIDv37pDD5x8wbcvHlyhIuI8KnXnYP/dc1qfP+5U/j7R14y7HA6ByN42zd2\nIhRN4aH3XzLN+V61rhEPvncbuoajuGP7s0pVb404hceJ6A4icui3twL4rbIjmAXMbF8LxZJl21El\nZmoKIxacgpHQcDyeQjSZLrhxLZ+mgBdExqeae0ZjZVNHEjMS2p26U1jVaMApNPkxFElkf36liCbS\n6ByKFBxay2eTSRntvV2jU0TwiuF2OnDBshrsOmms2Lzj2CCIgEtWls/IXrO+EWfGYjjcV95Jdo9G\nse/0GF6zqfyc6c2bW+FzO/DTPcZmFh7c0Ym6Kg9ef/6Skq+7+6rVSKYz+PafOw3ZfbpjAHtOjeKv\nrlub7WYqxLsvW4FVjVX4/K8OGhKkjKfS+PtHXsaSYAX+9qb1RV/3pouW4vYL2/DvTx7Bs8eNpel+\ntKsL//XUMdyxbRk+cNWqac8TET5+03rcc/1a/Hj3aXzsR3vLTpEf7R/H27bvRCyVwffffwnOK/J7\nd/nqBnz3rovRH4rjbdt3KlueZMQpvB/acp24fnsYwAeIKExE6hS1ZhCpf2SEUDRVdnBNEqz0IBRL\nGvL+wyacguxQMtKB1BcqvnEtH7fTgUa/10SkUH5wTbK8rhI9ozFDsgnHByOo9DgNRTfZYrOBusLh\nvjBE3mKdYjRV+9AU8BpyCsORBE4NT0yRyy7FtvY6HOgJIWLgd27HsSFsWhJEsEyKDshVTS3/Cfnx\nbOqofFDv97pw07kt+OW+M2VbM7uGJ/DkwT68/eJlRaVPJCsbqnDzphZ879mTZT+UCSHw5Sc6sKyu\nAm/ZurTka91OBz79unNwfDCC7+08WfK1APB/nzqGo/3j+PwbN8FfpkPvn27bhOV1lfjow3vLfhDZ\ncWwQ//vRl3Hlmgb8822bikZNRIR7b1yHj9+0Hj/b24N7Ht5b1Jl19IZxx/Znkc4I/OD9l2Z3gBRj\nW3sdvnfXxRiOJPC2b+y0vPAqFyPDawEhhEMI4dZvDv2xgBCieDP4HMKMfLaRXQqSmgo3hDA2LT0y\nkYCDys8/AFqhGQAGDKSPZGhu5AILaHUFI7uao4k0hiMJLC3TjipZVleBdEYYikLkXmYjaSkzHUgd\nWXkLY7+Wm9qMyWjvK6KMWoyLVtQirUtilCKaSGPvqdGyqSNJa7BCb00tP6/w2P5erG8OYFVj4ZmK\nfG7fshRj0SSeOlTa4Xzv2ZMgIrzrUmOamB+8ejXCsRS+/9ypkq/77YE+7O8O4Z7r18FtoMnj2vVN\neNXaBnz1d4dLXrwP94Xxf58+itsuWIJr1zcVfZ3E73XhP9+xBUOROD7+k31FU3VH+8fxwe/txsqG\nKvzXO7cYOuYPX7sGn3rtOfj1y2fw4YdenOaAX+kJ4e3ffBYOAh6++zJDES8AXLi8Ft//y0sRjqXw\ntm/szEbiVjG0eW2+EzAhn21k65rEjNSFlLhwlOjLl8howkj6qNwazny0WYXyYebkHoXyEQgwqZZq\nJIXUOVi+HVXSVlMBn9thyCkc6g2jwu0suJ+hEJvagjjaP46JROkPDHu6RuEgTR7DCFtW1IKo/BDb\n7pMjSKQzuNSgUwC0aGHXyeGSke/geBwvdA7jphJdR/lcsboeTQFvyZmFiUQKDz9/Cq85t6Xg5HUh\nzltagyvW1OOBP50oGoVkMgL3PXEYqxqqcNsFpVNSEiLCP9yyEePxFL76u8ItqumMwN8/8hL8Xhf+\n4ZaNhuwC2u/FJ28+B7872I9v7+ic9vxwJIH3ffsFuJ0OfOs92wxnFgDg/Vetwj++fiMef6UPH/qf\nF7PLqV4+PYa3f/NZeF0O/PADlxUdkCzG5qVB/OD9lyKWyuCt39hpa0HVonAKfp8LYQOhfCYjMB4v\nv59ZknUKBorNw5FEyTWcubicDtRWug2mj/RIwUD3EWB8qllKZhfbzZzPcoNOIZnOoGskatgpOByE\n1Y3GOpAO9YawrtlfciAul01LqpER2tRvKfbqyqjlhgMl1T43NrRUl60r7Dg2CJeDspPQRrhmXROS\n6dKqqU+80oeMQMEp5mK4nA7cdmEbnjrUX3Q47Gd7erQ21CvaDdsFtGihPxwvKqv965fPoKMvjI/e\nuM5QK7hkXXMA77xkBf7nuVMFVVS/t7MTe06N4jOv34j6Eu2+hXjvFe24fkMT/s//OzQlxRhLpnH3\nd3ehLxTDN+/cmv0wZIb3XLES//LGzfj9oX68/7u7sOPYIN5x/7MI+Fz40QcuM/y3kc/GJdV4+O5L\nkRHAHdt3WmrbBUrLXKy0ZHEOUm0wfRSOpyBE+WlmSVDqHxloSx2OlNc9yqXB78Vg2ED6KBSHz+3I\nynmUo7nah3AsVTbfbTZSaA1WwOWgsjnNruEJpDPC1C++0bbUjt7Ci3WKIXcilKorCFFcGbUU29pr\n8eLJkZI1lp3Hh3D+spqyee5ctrbXwl9GNfWx/b1YXleJc0oM8BXi9i1tSGUEfrmvZ9pzsg11Y2t1\nVibcKFeuacCmtuqCstqpdAb3/e4w1jcHcMtm8+LL9964DpUeJz7/64NTHu8ejeLfftuBq9Y14rYL\n2kzbJSJ88S3no7bKjY/8YE92J8vfP/ISdp0cwVfeekHBLiajvOOS5fi3N5+HPx0dxDu++Rzqqjz4\n4Qcus+RkclnXHMAPP3ApnA7CHdt3WrJRyi3/BACI6ElLlucQRltSQwZ3KUjMbF8bmUiU3LiWT4Pf\ni6FI+UhB27jmM5SfByZnFXrL1BW6R6JwENBiMAJxOghttRVlI4VSe5mLsabRj+7RaElHNhCOYyiS\nKLhDoRgt1T7UV3lKOoXOoQmMRZOmncJFK2oRSaSL7lcOx5J46fRYdvWmUbTW1Ho809FfMN89Fk1i\nx7FBvGZTi+HfCcmGlmpsbK3GowUG2XYeH0JHXxjvubx4G2oxiAgfvHp1QVntn+/twfGBCO69ca2h\n1Go+dVUe3HP9WjxzeCDboiqEwKd/+jIA4F/eWLwAbMT21+64ECeHIvjMz/fjvt8dwc/39uDjN63H\n686zvz3grVuX4Wt3XIhr1zfih3dfZrjTrxyrG/344d2XmUpr5VLKKTiI6H8DWEdEf5N/s/RuZ4mA\nz41oMl22fc3oLgWJmZ0Kw5Gk4fQRAF0p1Vih2WiRGTA+1dwzGkVLtc9UOL9cV0sthXQKq0xGCgBw\nfKB4Ae2QlLcwESkQUdnJ5r1dWl3AaOeRRKaEiu1XeKFzGOmMMFxkzuWa9U3oGYsVXED01KF+JNOi\n5BRzKW7f0oZ9XaPTIrPv7OhEbaUbtxrM+edz86ZWrMiT1U6mM/jak0dw7pLqkgN25fiLy9qxsqEK\nn//VK0imM/jFvh481TGAv331eiyttffJ+9JV9fir69ZqqqpPHsFbty7F/8qZhrbLrecvwYPvvXia\nVIhd2huq8MTfXG3pe0v9xd8BIA3ABSBQ4DZvkFIX5aKFMYOy2RKjKzkzGaHLZhv33Fr6yECkECq9\nhjMfoxvYTo9Gywrh5bPMwF6FE4MRBCvcphzkZFtq8RxpR4nFOqXY1FaNI/3j2YJfPntPjaLS4ywr\nm5HPkpoKtNVU4IUik807jg7B43Jgi8lUDKDNKwCFW1Mf29+L5movLjAwU1GIWy9YAgdhyszC6ZEJ\nPPFKH+64eHnZNtRiaLLaq6bIav9k92mcGp7Ax169zvKneUCTAf/Ua8/BsYEI/uP3R/G5X76CC5bV\n4M4CEhxW+Ovr1uC6DU244ZwmfP62zbaOdTYx0hFViFKCeB1CiC8AeJ8Q4nP5N6sHejaQOdtyswqT\nYnjGLt4up5bLHy2zkjMcSyGdEairMv6JvjHgRTieKnqxkvSH4yXXcOYjHUi5DqQeEzMKkmW1lRiO\nJEp2ehkRwstnRX0VnA4qWVc41BtGY8BruqC4uS2IdEYUTfPsPT2GzW1Bw8XrXLa212JX53DBNM/O\n40PYsrzG0kW2NViB9c3TW1OjiTSePtyPm85tsZSKAbR5l6vWNeKnL3ZnZRnMtqEW401blmZlteOp\nNP7jySO4cHmNoVbRclx/ThOuXNOAf3/yCELRJL7wpvMsnbNCuJwOPHDnVtx/57aSq3QXCkb+hzuI\n6CtEtEu/fZmIjPXmzRGkfHa5ZSLyeTO5uJoqN8bKRApmxPAk9bIttUQP9kQihfF4ynA7KqBJG9dV\neUpGCumMQO+Y8WlmyaSEdnGHU2ovczE8LgdW1FeWdAodvcbkLfKRMtqF6grxVBoHe0KmU0eSrStq\n0ReKZ4UFJSORBF45E8Llqxss2QW0aOGFzqmtqc8c7kcsmTHVdVSI27csRc9YDM+eGEI0kcbDz3fh\n1Rubbee8fW4n3ndlO/54ZBCf+dkB9IzF8LEb1yv55E1E+PQt58DrcuAj1601HTEasb9YMOIUvgUg\nDOCt+i0E4MGZPCjVGE0fmS00A9oGtnItqcMmxPAkWf2jEimkfhPTzLm0VPtK1hT6wzGkMsJ0+qhc\nW2osmUbPWMxSy92aEm2p2mKdMNY3m78QtNVUoKbSXdApvNITQiKdwYUmi8ySSXG8qXWF504MQQhY\nqidIrl7fiGRaYEdOa+pj+3tRU+nOCqdZ5dUbmxHwuvDoi934+d5ujEWTBdVQrfDOS1bA73Xhh7u6\ncPHKOlyxRp3g8oaWarzw6Rtwzw1rldlcjBhxCquFEJ8VQhzXb58DMF3kYw5jVD47FEuBCIbbOwFd\nFK9MS6oZ3SNJg54SKtWBNLmG01zKpDXoKxkpdI/IdlSzNQXt9aeLCON1DpnvPJKsafLj5NBEwWaB\nzqEI4qmMpU+HRITNRYrNe/WJ5FI7FEqxrjmAgM81bYht57EhVLidRTVtjLB1RR2qPE48fVhLISVS\nGTx5sB83ntNsqjmgED63E6/d3IrfvHwGD/zpBDa0BGw7Gkmwwo13XqqJ3X3sRnu1hEIYTf0yxTHy\n2xMloivlHSK6AoAa5aVZQtYUwmUW7YSiSfi9LlP5WCPb16xECjJ9VGpWYXINp8lIIegr2ZIqZxSW\nmnQKwQo3Aj5X0UjhxID5ziPJmiY/UhlRUJ9fFpnPabWmunLukiAO94WnTdzu6xpFc7XX8PRuPk4H\nYcvyWuzOcwo7jg1h28o6W/lpj0tTTX1GV03dcWwQ4XjKctdRPm/c0oZIIo0j/eN47xXm21BLce8N\n6/DjD16GS0y24zKzg5Hfyg8C+C8i6iSiTgD/CeADM3pUipE1BSPpI7O9vTWVxmsKRlZxSmTxeKDE\nVLPR3cz5tAZ9+v7lwkXsycE1cxdDIiqplnrCZqQAFNZAOnQmBAfBtDSAZHNbEMm0wOHeqbb3Whha\ny2dbey06+sLZ35H+sNZKaid1JLlmfRO6R6M42j+O3x7ohd/rwhVrrNcpcrm4vS6bWnuDheGvUvjc\nTlNT3MzsUjZPIoTYB+B8IqrW788LZdRcZPqo3KIdM2J4EllTEEIU/TQ1EknA63KgwkSnic/thN/r\nwlCJWYX+UAwep6PsEpx85F6FvlAMKwrsNOgeiaKm0m1Y1iGXZbWVONJfuJPnxEAEjQGvqQleyeoS\n+5oP9YbR3lBluV1yU5sWYezvGctOOY9EEugcmsDbthXW9TeKrCvsPjWM6zY0Z9sxzQ6tFUK2pj55\nqB+PH+jDtRuaLP8M8nE4CF+74wIkUhllNpn5geH4VQgRmo8OAQC8LgfcTjLUkmp0RkFSU+lGWtdM\nKoaUuDAbgmsDbKUjhcaA17TdcrMKPaNRLLGYMller80qFNoy1TkUwUoDi3UKUeV1YUnQV9ApdPSF\ncY6JSeZ8ltdVIuBzTakr7D0t6wn2Gu3OX1oDt5OyS3eePT6EgM+Fc5fYFxheUlOBdc1+fPMPxzEU\nSdjuOspna3sdLlcUeTDzh4XfdAstrWFEKdXM1jWJkQG2kYmEqXqCpJzURX84ZqodVVJuqrnbwuCa\nZFldJRKpTDa1lcsJE+qohVjd5J+2VyEST+Hk0IStFkQiwqYlQRzIcQr7ukZBBFvFYACo8Dhx7pJg\n1insODaES1bW2y4GS65Z34ShSAIelyMbOTCMHUoJ4r1F/3dBCOP5veVF8bSta2ZrCtrFvpT+0VAk\nYaqeIGnwe0oXmg2u4cxH6hkVihSEEOgeiVruSV+mO5P81ZyhWBKD4wlL9QTJmiY/jvVHpkQhh/us\nTTLns3lpEAd7w9nupr1do1jXFLCU6spnW3st9p4eRedgBCeHJsruYzbDNes0R3DV2kZL6T6GyafU\nx5VP6v8+MhsHMtMEfOVF8awWmoEykULEWqRQ7/eWTB/1hWKmJC4kVV4Xqn2uglPNoWgKkUTaslPI\nzioMTXUKcvGHnUhhbVMA0WQaPTnHne08spE+ArTdyolUBkf6xi0roxZja3sdEqkMtv9RW2Kvosic\na/tVaxtw5+X2po0ZRlLqo8UwET0OYBUR/SL/SSHErTN3WOopt30tlc4gkkhbKDTLnQrFP9Gblc2W\nNPi9GJ5IIJ0R00b2Y8k0QrGUpUgBKL5XQXYeWU0ftdVWgGj6ANsJE3uZi5HbgSSFzg71hlHpcRre\nEFeMzTmTzZUeJ0YmkpYnmfORUtM/3tWFuiqPpSG7YnhcDnzvrkuU2WOYUk7htQC2APgegC/PzuHM\nHH6vu+Ria+kwzBaag2UihWQ6g1AsZbGm4IEQmlPJ1zcasDijICk2q2C1HVXidTnRWu2blj46MRgB\nEQxvRStErlO4RtfL0RbrBCxr/Uja66vg97qwv2cMXrcWQJ9vs54gqfd7saqhCscHI7h0VZ3tY2WY\nmaTUFfABIcS7ieibQohnZu2IZohqnwuHShSaswqpFgvNxWoKIxZ0jyRZqYvx6aJ3cjdzo4VCM6B1\nIL1yZnozWbd+Mbejc7O0gIR252AES4IVttob66o8qKvyZDuQhBDo6A0rGdhyOAgbl1Tj5e4xOIhQ\n4XZiXbO1uYdCbG2vxfHBCC6zoXfEMLNBqZrCRUS0BMA7iaiWiOpyb7N1gKrwl0kfZXcpmKwpeF1O\nVHqcRaUuRiKaXTMKqRLpFArNKvTpukfNNiKFwfE4EqmpshE9YzF4XI7sRLUVCg2w2e08kuRqIPWH\n4xiZSCpLx2xaEsTBMyG8eGoEm5cGlXUIAcCVaxvhdBBexS2ezByn1G/9fwN4EsAGALvzbrtm/tDU\nEvC5siv1CiFls61sK6qpcBdNH2UlLixECrJjqVCxuT+7m9l6pCDEZMQhkZ1HdlIcy+sq0ReKZyem\nhRA4rsgpyLZUISblrtfbLDJLNi+tRiyZwUunxyyL4BXj9ee14g9/d62t7iuGmQ1K7VP4dyHEOQC+\nJYRYJYRYmXOzLYhHRE4i2kNEv7JrywgBnzZkFi0i7TAZKZhv6wtWFldKnUwfWSs0A0WcQjgOl4NM\nrfjMJXeqOZfu0ajhvczFmBTG0+oT2o6FlJIL4pomP0YnkhiKJNBhYdtaKTYtmRxUsyqCVwwiUrZu\nkWFmkrLxsRDiQ0R0PhH9lX47T9F73wPgYNlXKSK7aKdICslqTQHQIoVi+kcyUrBy8a72ueBxOgqu\n5ewLaXUGq5/oi80qdI9an1GQTO5V0FJIVlZwFiO32HzoTBjN1V5TW9xKsarRj0qPVvNQ1Y7KMPON\nsk6BiP4awEMAmvTbQ0T0ETtvSkRLAbwOwP127JihnP6RlV0KkppKd9GW1Mn0kfkLFxEVlbowu5s5\nn0JTzfFUGgPhuOXOI8myvL0K0imoihQA3Sn0hpWljgBN1XRjazWaAt6sFAjDLDaM5Er+EsAlQogI\nABDRFwDsBPAfNt73qwD+DiV2PRPR3QDuBoDly+2JkgG5OxUKf6IPxZJwOghVHvPdMdpOheKRQsDn\nsrwvtaHIANtAOG5rKXm1z4VKj3NKpHBmVPvabqTQ6PfC53ZMiRRcDrI9SwAAS4I+VHqc6OgN4+jA\nOK5cq7Zw+4mbNyAUSy6qTVsMk4uRKxUByE3Ep/XHLEFEtwDoF0LsLvU6IcR2IcRWIcTWxkb7mi5Z\n+ewiwnWhaArVPpeli0EwRyk1n5EJa4Nrkga/p2D3UX84brnIDGhRSEtw6ga2Hjm4ZtMpEBGW1U52\nIHUORbCsrtKyY8y3vbrRjycP9iGRyiirJ0i2ttfhug3NSm0yzHzCSKTwIIDniOin+v3bADxg4z2v\nAHArEb0WgA9ANRH9jxDiXTZslqXc9jUrukeSmko3EqkMYskMKvIijWGLEheSer932lL5RCqD4UjC\ncjuqRNvANjnQd9rmNHMuuW2pxy3sZS7FmiZ/VtFU9S5ehlnsGCk0fwXAewEMAxgB8F4hxFetvqEQ\n4pNCiKVCiHYAdwD4/Uw7BMBYodnqKr9SUhdWJS4kDX4vhsYTU6IQuXjHTqQAAC3VFVMihe6RKIgm\n6w12WFZXidO6hPbJoQm0W5TMLoSsKzgdZHmxDsMwhTFSaP4SgLjeovo1IcSeWTgu5cj0UahYTSGa\ntNSOCpQWxRux7RQ8SOhSGZLsjIKNQjOgRQp94TjSuupoz2gUjX4vvC77S1WW1VViPJ7Cwd4Qosk0\nVtrQPMpHLtxZ1VCl5FgZhpnESJL3EIDtRPQcEX2QiOxtHclBCPG0EOIWVfZKkd3TXDR9lLI0uAZo\nNQWgsFMYtl1TmD6rYHU3cz4tQR/SGZG1bWePQj6yLfUPhwcBwPJynULI6IBTRwyjHiPpo/uFEFcA\n+AsA7QBeIqLvE9G1M31wKpGdRcULzTbSR5VS/2hq+iiaSCOWzNiqKWSdQs7SGhkpNNtMH+VvYOsZ\njdpuR5XIAbY/HB4AAKWRwor6SjRXe5XuJWAYRsNQOwgROaHJXWwAMAhgH4C/IaKHZ/DYlFNq+9pY\n1F6hGZgeKQzbEMOTNAQ0hzIUmXQ4/eE4HKQVoe0wOaug5f57RmNYqsop6O2yu04Ow+tyoNXC3odi\nuJ0O7PjE9XjHxfZblRmGmUrZJDoRfQXArdB0kP5FCPG8/tQXiKhjJg9ONX5d/yifWDKNeCqDap/F\nmoJMH+VJXQzrraS2uo+qCqSPQnHU+73TdiyYpVWXujgzFsNgJI5EOqMsUqjyurTNceMJrG/2K5eL\ntvt/ZximMEaugvsBfFoIMVHguYsVH8+MUmzRjnzMak3B53bA43IUjRSsrOKU1FV54KCp6aO+cMx2\n6ggAaivd8Lgc6B2LoXtEzYxCLktrKzE4nlDajsowzMxS1ikIIb6lS2dvgjZXIB//gxBirMS3zjn8\nXldBmQurstkSItL0j/JqCiMR+5GC00Goq/JgMDd9FIoraRslIn1WIYYefZpZVaQAaMXmvV2jrAzK\nMPMII+mjv4QmXrcUwF4Al0KTubhuZg9NPdU+d3ZqN5eQDTE8SSGpi6wYnk3Btvoq79RCcziO85aq\naQJrqdammrtH9eU6irqPgMkOJBVCeAzDzA5GCs33ANgG4KQQ4loAFwIYndGjmiGKpY+yCqkW5xQA\nra6Q7xRGJhJwOsiWswG0YrMsNKfSGQxF4rZnFCStQR/OhKLoHoki4HVZTqEVQjoFjhQYZv5g5CoY\nE0LEiAhE5BVCHCKi9TN+ZDOA31u40CxTSnYu3sFKd3Z/gGQokkBtpdt2kbXB78XeLs0PD44nIATQ\npKibpyVYgb6xXpweUdeOKrnp3Bb0jEVx4XKWoWaY+YKRSOE0EdUA+BmAJ4jo5wBOzuxhzQwBnxsT\niTRS6akrKGX6yM6nZG2nwvSagp16giQ3fSQ3pamMFBLpDF7uHlOaOgI0R/nRG9YpEcJjGGZ2MFJo\nfqP+5T8S0VMAggAem9GjmiH8esvpeDyFmpyLtd1CMyB3KkyvKahYANMQ8CCSSCOaSKM/JHWPVEUK\nmp3+cNz2xjWGYeY/RZ0CEfkAfBDAGgAvA3hACPHMbB3YTJCrlJrrFMaiSXicDnhd1j/R1lR6MJFI\nI55KZ/V4RiYSWNVgX7AtV+piUuJCXaQgaauxvp+BYZiFQamr4HcAbIXmEG4G8OVZOaIZpLqIfHYo\nmkJ1hbVdChKZehrLiRaURQr6nMPgeDy7U7lRkVPIbW3lSIFhmFLpo41CiM0AQEQPAHi+xGvnBX5v\n4UU7dnYpSLL6RxNJNAV8yGQERiaSqFfiFDQHMDSeQH84jvoqj7I8fUOVFy4HIZURSjajMQwzvyl1\nZcl+5BVCFFaRm2cUW8lpRwxPki91EY6lkM4IJZFCfU76aCAcUxYlAIDDQWjW6xOqu48Yhpl/lIoU\nzieikP41AajQ7xMAIYRQtzF9lvAXSx/ZkM2W5IviqRDDk8hoQ0sfxbMXcVW0BH3oC8VsS3EzDDP/\nKeoUhBALbntJNlLITx9Fk1hmM3Uincqo7gyGFUhcSHxuJwI+FwbHE+gPx5TvJW6vr8KoPmjHMMzi\nxvoI7zwkoNcUCqaPVNUU9PSRdApS5dQuDX4vBsJxDI4nbK/hzOdTrzsHkSJ7JhiGWVwsKqfgczvg\ncq5dlF0AABCTSURBVNCUPc1CCIRiSdvpI7/XBaeDsumjrBiegvQRoHUgdfSFkc4I5WmeuiqPbX0m\nhmEWBotq1JSIpukfxZIZJNPCdqFZKqWO6kqpkzUFNRfbBr8XxwfGAdjfuMYwDFOMReUUAK3YnJs+\nmpxmth80BXOUUkciCXhdDlS41ZRm6v0eZIT2dSMXhBmGmSEWnVMIeN1T5hTGFMhmS7SdCpq9oUgC\ndVUeWwNxuTTkrN5UNc3MMAyTz6JzCn7f1EU7KsTwJDWVnimRgso8fa5TUDmnwDAMk8uicwrVPteU\nQrMKMTxJfk1BrVPQbNVUuuFTlJJiGIbJZ9E5hYDPjXA8p6YQlbsU1NcUVMwoSGSkwKkjhmFmkkXn\nFPzeqd1Hk1vXVEQKHoRjKaTSGQzPUPqIp44ZhplJFp1TCOjpIyG0Vh4V+5klcoBtOJJAKJZSGinU\n6+kj1YNrDMMwuSw6p+D3uZDKCMSS2va1UCyJCrcTHhu7FCTSKZwYjAAA6vzqnILf60JztRdrm9RK\nXDAMw+SyqCaaAa2mAADheBIVHmd2l4IKZAdT1ikojBSICI/fezUqPVxkZhhm5lh0kUL+op1QzL5s\ntkRuc5NOQZXEhSRY4eZ9xwzDzCiL7grj9051CmMKxPAkNbqdYwN6pMB6QgzDzDMWnVOQ6aPxKZGC\nmvTRZE1B0yhip8AwzHxj0TmFyUhB6zoKRe0v2JEEfG4QAaeGJwCo2aXAMAwzmyw6p5C/aEfFfmaJ\n00Go9rmRTAsEfC7O/zMMM+9YdFctWVQOx1LIZISS/cy5yBQSp44YhpmPzLpTIKJlRPQUER0kogNE\ndM9svn+VV2vpDMeSiCRSyAg1stkSWWzm1BHDMPORszGnkALwMSHEi0QUALCbiJ4QQrwyG2/ucjpQ\n6XFiPJbKqqWqqikAQFB3BvUcKTAMMw+Z9UhBCHFGCPGi/nUYwEEAbbN5DFL/SKXEhSQbKbBTYBhm\nHnJWawpE1A7gQgDPFXjubiLaRUS7BgYGlL5vwOfCeDzHKSiMFLimwDDMfOasOQUi8gN4BMBHhRCh\n/OeFENuFEFuFEFsbGxuVvnfA50YollS6dU3CNQWGYeYzZ8UpEJEbmkN4SAjx6Gy/f8Cnp4/0moLK\nQjPXFBiGmc+cje4jAvAAgINCiK/M9vsD09NHKgvNXFNgGGY+czYihSsAvBvAdUS0V7+9djYPQCs0\nJ7OrOOWUswoaArwhjWGY+cust6QKIf4EgGb7fXMJ+NwYj6UwFk3C73XBpXDy+Mo1DXjwvdtw3tKg\nMpsMwzCzxaLbpwBo6aNIIo3RCXVieBKng3Dt+ialNhmGYWaLRSdzAUymi7pHo0rbURmGYeY7i9Ip\nyBbUHnYKDMMwU1iUTsGvp4x6x2JKZxQYhmHmO4vSKUj57FRGKJ1RYBiGme8sUqcwGR1wpMAwDDPJ\nonQKuXMJKgfXGIZh5juL0inktqFyoZlhGGaSRekU/LlOQfGcAsMwzHxmUTqFCrcTToc2VM2RAsMw\nzCSL0ikQUbYDiWsKDMMwkyxKpwBMFpu5+4hhGGaSResUZFsqzykwDMNMsnidgowUOH3EMAyTZfE6\nBZ8LRIDfw5ECwzCMZNE6Bb/PhWqfGw7HWV3twDAMM6dYtB+TX7u5FUtrK872YTAMw8wpFq1TuOnc\nFtx0bsvZPgyGYZg5xaJNHzEMwzDTYafAMAzDZGGnwDAMw2Rhp8AwDMNkYafAMAzDZGGnwDAMw2Rh\np8AwDMNkYafAMAzDZGGnwDAMw2Rhp8AwDMNkYafAMAzDZGGnwDAMw2Rhp8AwDMNkYafAMAzDZGGn\nwDAMw2Rhp8AwDMNkYafAMAzDZDkrToGIXkNEHUR0lIg+cTaOgWEYhpnOrDsFInIC+C8ANwPYCODt\nRLRxto+DYRiGmc7ZiBQuBnBUCHFcCJEA8DCAN5yF42AYhmHycJ2F92wD0JVz/zSAS/JfRER3A7hb\nvxsnov0zcCwNAAbnkd2ZtD3f7M6k7flmdyZtzze7M2l7vtkFgPVmv+FsOAUq8JiY9oAQ2wFsBwAi\n2iWE2Kr8QOaZ3Zm0Pd/szqTt+WZ3Jm3PN7szaXu+2ZW2zX7P2UgfnQawLOf+UgA9Z+E4GIZhmDzO\nhlN4AcBaIlpJRB4AdwD4xVk4DoZhGCaPWU8fCSFSRPRXAH4LwAngW0KIA2W+bfsMHc58szuTtueb\n3Zm0Pd/szqTt+WZ3Jm3PN7uWbJMQ09L5DMMwzCKFJ5oZhmGYLOwUGIZhmCxz2inMlBwGES0joqeI\n6CARHSCie1TZ1u07iWgPEf1Koc0aIvoJER3Sj/syhbbv1X8O+4noB0Tks2jnW0TUnztTQkR1RPQE\nER3R/61VZPeL+s/iJSL6KRHVqDrmnOf+logEETWosktEH9F/pw8Q0b+pOmYiuoCIniWivUS0i4gu\nNmmz4N+EovNXzLatc1ju79jq+Stl1+75K/GzsHv+fET0PBHt0+1+Tn98JRE9p5+/H+rNPaURQszJ\nG7Qi9DEAqwB4AOwDsFGR7VYAW/SvAwAOq7Kt2/wbAN8H8CuFNr8D4C/1rz0AahTZbQNwAkCFfv9H\nAN5j0dZVALYA2J/z2L8B+IT+9ScAfEGR3VcDcOlff8GK3WK29ceXQWuGOAmgQdExXwvgdwC8+v0m\nhT/nxwHcrH/9WgBPm7RZ8G9C0fkrZtvWOSz1d2zn/JU4Xtvnr4Rtu+ePAPj1r90AngNwqf73fIf+\n+H8D+FA5W3M5UpgxOQwhxBkhxIv612EAB6FdHG1DREsBvA7A/Srs6TaroV0IHgAAIURCCDGqyj60\nLrQKInIBqITFuREhxB8ADOc9/AZoDg36v7epsCuEeFwIkdLvPgtt3sU0RY4ZAO4D8HcoMFhpw+6H\nAPyrECKuv6ZfoW0BoFr/OgiT57DE34SK81fQtt1zWObv2PL5K2HX9vkrYdvu+RNCiHH9rlu/CQDX\nAfiJ/rih8zeXnUIhOQwlF+5ciKgdwIXQPKsKvgrtlzGjyB6gRUsDAB7U01L3E1GVCsNCiG4AXwJw\nCsAZAGNCiMdV2NZpFkKc0d/rDIAmhbYl7wPwG1XGiOhWAN1CiH2qbOqsA/AqPZx/hoi2KbT9UQBf\nJKIuaOfzk1YN5f1NKD1/Jf7ebJ3DXLsqz1/e8So9f3m2bZ8/0tLWewH0A3gCWqZlNMfxGrqGzmWn\nYEgOw9YbEPkBPALgo0KIkAJ7twDoF0Lstn1wU3FBSxd8XQhxIYAItFDeNnqO+A0AVgJYAqCKiN6l\nwvZsQESfApAC8JAie5UAPgXgMyrs5eECUAstrP84gB8RUaHfcyt8CMC9QohlAO6FHlWaRfXfhBHb\nds9hrl3djpLzV+B4lZ2/ArZtnz8hRFoIcQG0iOtiAOcUelk5O3PZKcyoHAYRuaGdlIeEEI8qMnsF\ngFuJqBNauus6IvofBXZPAzgthJCfrn4CzUmo4AYAJ4QQA0KIJIBHAVyuyDYA9BFRKwDo/1pKmRSC\niO4EcAuAdwo9aaqA1dAc5D79PC4F8CIRtSiwfRrAo3qo/zy0aNJ0EbsId0I7dwDwY2gXBVMU+ZtQ\ncv6K/b3ZPYcF7Co5f0WOV8n5K2Lb9vmT6Knlp6E5rxo9LQwYvIbOZacwY3IYund/AMBBIcRXVNgE\nACHEJ4UQS4UQ7dCO9/dCCNufuoUQvQC6iEgqHl4P4BW7dnVOAbiUiCr1n8v10PKcqvgFtF946P/+\nXIVRInoNgL8HcKsQYkKFTQAQQrwshGgSQrTr5/E0tMJgrwLzP4OW4wURrYPWMKBKHbMHwNX619cB\nOGLmm0v8Tdg+f8Vs2z2HheyqOH8lfha2z18J23bPX6Ps3iKiCmgf9g4CeArAm/WXGTt/RqvbZ+MG\nrQp/GFpu7FMK7V4JLYx6CcBe/fZaxcd+DdR2H10AYJd+zD8DUKvQ9ucAHAKwH8D3oHdXWLDzA2h1\niSS0P8a7ANQDeFL/JX8SQJ0iu0eh1Zzk+ftvVcec93wnrHUfFTpmD4D/0X/OLwK4TuHP+UoAu6F1\n6T0H4CKTNgv+TSg6f8Vs2zqHRv6OrZy/Esdr+/yVsG33/J0HYI9udz+Az+iPrwLwvP6z/rGRv22W\nuWAYhmGyzOX0EcMwDDPLsFNgGIZhsrBTYBiGYbKwU2AYhmGysFNgGIZhsrBTYGYMIhov/ypb9t9D\nREty7neaVcTMs/cD0hQ77817/DYi2phz/2kimpFF67MBEX2ViK4q85pbpNIms7hgp8DMZ94DTZrD\nNvrE6zYhxHlCiPvynr4NmpLlvIeI6gBcKjRRvVL8Gtp0fuUsHBYzh2CnwMwq+uTlI0T0gn67Qn/8\nH0nbE/A0ER0nor/O+Z5/IE3D/k/6p/m/JaI3A9gK4CHSNOgr9Jd/hIheJKKXiWhDgff3EdGD+vN7\niOha/anHAbTptl6V8/rLAdwKTaxsLxGt1p96C2n69Yfl63VBsi/q/6+XiOgDRX4G0/4/+uPv1793\nn/4zqtQf/zYRfZ00vf3jRHS1/rM6SETfzrH7aiLaqf//f6zr6+TzZgCP5XxPJxF9Lv9nJrQBpqeh\nSVAwiwh2Csxs8zUA9wkhtgF4E6ZKjG8AcBM03ZfPEpFbT9O8CdpE983QHAGEED+BNuH9TiHEBUKI\nqG5jUAixBcDXAfxtgff/sP79mwG8HcB3SFsqdCuAY7qtP8oXCyF2QJN6+Lj+3DH9KZcQ4mJoImyf\n1R+7C5rK7DYA2wC8n4hW5r55sf+PzqNCiG1CiPOhSRTclfNcLYDL8P+3d++uUURRHMe/R0VCSMRC\nCIKIYEzhCwsbiYJisFIQO0ljJQpqYbDTzv9AEBWLpPFRSrCIdiFBwSiY9VkKghgrUZAtkmNx7q6T\nye7OBuImy/4+ENhk586ZO4S9O/fOnBPJ0saJ1NB7gH0WBVq2ANeBodT/GaKuR94g8eRsVr1zNgMc\nQTrKhuJNRFbUELDb/iWX3GRmven1U49c9WUzmwP6iMf/n1Q+9M1svGD/laRir4EzNd4/DNwCcPdP\nZvaFSIm83Iyg2Tg70usTwP50FQORF38XUcQoG79ef/aa2U1gM9BDFImpGHd3N7MS8N3dS6n9+xR/\nGzHFNZ3O7UbgRY3j3kqkYa/Xl+w5m2OFpuekfWhQkFZbBxzKfLMHIH2QlTN/mif+P5ebmriyj0r7\nvJVKVV0rjgGX3X2idpPC+KPAaXd/a2bniPxZ+XgLLD5PCyn+PPDc3c8WHPcfIF9utd4560rbSwfR\n9JG02jPgUuUXMztQsP0UcCqtBfSweI77F1HScDkmgeEUewDYDnwuaNNsnAngokVqZMxswJYWQ2rU\nn17gW2o/3ES8rJfAoJn1p9jdqX95H4H+Jvc5QCRXkw6iQUH+p24z+5r5uQpcAQ6mhdgPwIVGO3D3\nV8Sc/ixRmasE/ExvjwJ3cgvNRW4D69M0zGOiHnW5oM0j4FpamN7ZYLv7RErzN2b2DrhL7mqloD83\niAyZ00TW2qa5+w/ibqyHZjZLDBJLFtqJu4qONrnbY2l76SDKkiprnpn1uPvvdDfOJHDeU53bdrTa\n/TGzKeCkN6jzbWZ9wAN3P96q45K1QWsK0g7uWTw81gWMtfOAkKx2f0aIabO6g0J6f6Q1hyNria4U\nRESkSmsKIiJSpUFBRESqNCiIiEiVBgUREanSoCAiIlV/AT/g6wQgFi3XAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fb6b8edf668>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "n=30\n",
    "delta = 0.9\n",
    "range_n = np.arange(1,n+1,1)\n",
    "\n",
    "y = []\n",
    "for i in range_n:\n",
    "    y.append(outcome(i,delta)[1][1])\n",
    "\n",
    "plt.figure()\n",
    "plt.xlim(0,30)\n",
    "plt.ylim(0,10)\n",
    "plt.xticks([0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30])\n",
    "\n",
    "plt.xlabel(\"Length of the game (n)\")\n",
    "plt.ylabel(\"Payoff of player1\") \n",
    "plt.plot(range_n,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**7)** [0.5 point] What pattern do you see in the graph? What is the intuition/explanation for this?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "d4f45cf90d2d99fa9abe336eb5e07369",
     "grade": true,
     "grade_id": "cell-28564be6ef652072",
     "locked": false,
     "points": 0,
     "schema_version": 1,
     "solution": true
    }
   },
   "source": [
    "YOUR ANSWER HERE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-38-e3f8ad1d2d9d>, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-38-e3f8ad1d2d9d>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    The line will go towards 5 which is the middle of the graph, if the game would be played infinite times both sides will get 5 since they know each other at some point and will share the 10 equally.\u001b[0m\n\u001b[0m           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "   I am going to compare the situations n=1 and n=2 to understand the basic factors that drive the shape of the model. Case n=1, you know that if n=1 the outside option for player 2 is automatically 0, hence player 1 can offer anything to player 2 because he will accept the offer, hence the profit of player 1 will be 10. Case n=2, you know that outside offer for player 1 in round 2 equals 0, hence profit for player 2 equals 10, but if you discount that profit it will give an outside option for player 2 in round 1 of 9. Hence player 1 needs to offer 9 to player 2, hence his profit will be 1. Note: you can already observe a reduction in the payoff of player 1. Case n=3, you know that player 1 will offer 0 to player 2, so his outside option in round 2 = 9 (discounting), so player 2 needs to offer him 9, hence outside option for player 2 in round 1 equals 0.9, instead of the 0 you had with the n=1 case. So then the profit of player 1 equals 9.1. If we continue this reasoning you see that the trend continues where on the odd numbers player 1 will make the most profit and it will discount further as explained with the 3 cases. And player 2 will make the most profit in the even numbers, which also discounts. If this trends continues you see that the payoff of player 1 will slowly converge towards 5."
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

